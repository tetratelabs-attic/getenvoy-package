// Copyright 2019 Tetrate
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/manifest.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Compliance int32

const (
	Compliance_FIPS_1402 Compliance = 0
)

var Compliance_name = map[int32]string{
	0: "FIPS_1402",
}

var Compliance_value = map[string]int32{
	"FIPS_1402": 0,
}

func (x Compliance) String() string {
	return proto.EnumName(Compliance_name, int32(x))
}

func (Compliance) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{0}
}

type OperatingSystemFamily_Name int32

const (
	OperatingSystemFamily_DEBIAN  OperatingSystemFamily_Name = 0
	OperatingSystemFamily_RHEL    OperatingSystemFamily_Name = 1
	OperatingSystemFamily_DARWIN  OperatingSystemFamily_Name = 2
	OperatingSystemFamily_WINDOWS OperatingSystemFamily_Name = 3
)

var OperatingSystemFamily_Name_name = map[int32]string{
	0: "DEBIAN",
	1: "RHEL",
	2: "DARWIN",
	3: "WINDOWS",
}

var OperatingSystemFamily_Name_value = map[string]int32{
	"DEBIAN":  0,
	"RHEL":    1,
	"DARWIN":  2,
	"WINDOWS": 3,
}

func (x OperatingSystemFamily_Name) String() string {
	return proto.EnumName(OperatingSystemFamily_Name_name, int32(x))
}

func (OperatingSystemFamily_Name) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{4, 0}
}

type OperatingSystemFamily_Distribution_Name int32

const (
	OperatingSystemFamily_Distribution_UBUNTU OperatingSystemFamily_Distribution_Name = 0
	OperatingSystemFamily_Distribution_DEBIAN OperatingSystemFamily_Distribution_Name = 1
	OperatingSystemFamily_Distribution_CENTOS OperatingSystemFamily_Distribution_Name = 2
	OperatingSystemFamily_Distribution_RHEL   OperatingSystemFamily_Distribution_Name = 3
	OperatingSystemFamily_Distribution_MACOS  OperatingSystemFamily_Distribution_Name = 4
)

var OperatingSystemFamily_Distribution_Name_name = map[int32]string{
	0: "UBUNTU",
	1: "DEBIAN",
	2: "CENTOS",
	3: "RHEL",
	4: "MACOS",
}

var OperatingSystemFamily_Distribution_Name_value = map[string]int32{
	"UBUNTU": 0,
	"DEBIAN": 1,
	"CENTOS": 2,
	"RHEL":   3,
	"MACOS":  4,
}

func (x OperatingSystemFamily_Distribution_Name) String() string {
	return proto.EnumName(OperatingSystemFamily_Distribution_Name_name, int32(x))
}

func (OperatingSystemFamily_Distribution_Name) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{4, 0, 0}
}

// Builds must be uniquely addressable from the top level so that they can be used to look up the location of binaries.
// Format: filter_profile(-compliance_profile):envoy_version/operating_system_family
// Examples:
//   - istio-fips1402:1.10.1/debian (for Ubuntu & Debian)
//   - standard:1.11.1/darwin (for MacOS)
type Manifest struct {
	ManifestVersion string `protobuf:"bytes,1,opt,name=manifest_version,json=manifestVersion,proto3" json:"manifest_version,omitempty"`
	// Key is composite key of the value's filter_profile and compliance_profile
	// Note: compliance_profile is optional
	// Format: filter_profile(-compliance_profile)
	Flavors              map[string]*Flavor `protobuf:"bytes,2,rep,name=flavors,proto3" json:"flavors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Manifest) Reset()         { *m = Manifest{} }
func (m *Manifest) String() string { return proto.CompactTextString(m) }
func (*Manifest) ProtoMessage()    {}
func (*Manifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{0}
}

func (m *Manifest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Manifest.Unmarshal(m, b)
}
func (m *Manifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Manifest.Marshal(b, m, deterministic)
}
func (m *Manifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manifest.Merge(m, src)
}
func (m *Manifest) XXX_Size() int {
	return xxx_messageInfo_Manifest.Size(m)
}
func (m *Manifest) XXX_DiscardUnknown() {
	xxx_messageInfo_Manifest.DiscardUnknown(m)
}

var xxx_messageInfo_Manifest proto.InternalMessageInfo

func (m *Manifest) GetManifestVersion() string {
	if m != nil {
		return m.ManifestVersion
	}
	return ""
}

func (m *Manifest) GetFlavors() map[string]*Flavor {
	if m != nil {
		return m.Flavors
	}
	return nil
}

type Flavor struct {
	// This is duplicated in order to make flavor easier to sort
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Filter profile is the name of the collection of filters
	// E.g. standard, minimal, istio
	FilterProfile string `protobuf:"bytes,2,opt,name=filter_profile,json=filterProfile,proto3" json:"filter_profile,omitempty"`
	// All filters available in this flavor
	Filters     []string     `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	Compliances []Compliance `protobuf:"varint,4,rep,packed,name=compliances,proto3,enum=api.Compliance" json:"compliances,omitempty"`
	// Key is Envoy version
	Versions             map[string]*Version `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Flavor) Reset()         { *m = Flavor{} }
func (m *Flavor) String() string { return proto.CompactTextString(m) }
func (*Flavor) ProtoMessage()    {}
func (*Flavor) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{1}
}

func (m *Flavor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flavor.Unmarshal(m, b)
}
func (m *Flavor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flavor.Marshal(b, m, deterministic)
}
func (m *Flavor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flavor.Merge(m, src)
}
func (m *Flavor) XXX_Size() int {
	return xxx_messageInfo_Flavor.Size(m)
}
func (m *Flavor) XXX_DiscardUnknown() {
	xxx_messageInfo_Flavor.DiscardUnknown(m)
}

var xxx_messageInfo_Flavor proto.InternalMessageInfo

func (m *Flavor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flavor) GetFilterProfile() string {
	if m != nil {
		return m.FilterProfile
	}
	return ""
}

func (m *Flavor) GetFilters() []string {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Flavor) GetCompliances() []Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *Flavor) GetVersions() map[string]*Version {
	if m != nil {
		return m.Versions
	}
	return nil
}

type Version struct {
	// This duplicated in order to make version easier to sort
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Builds               []*Build `protobuf:"bytes,2,rep,name=builds,proto3" json:"builds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{2}
}

func (m *Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Version.Unmarshal(m, b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Version.Marshal(b, m, deterministic)
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return xxx_messageInfo_Version.Size(m)
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Version) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type Build struct {
	OperatingSystemFamily *OperatingSystemFamily `protobuf:"bytes,1,opt,name=operating_system_family,json=operatingSystemFamily,proto3" json:"operating_system_family,omitempty"`
	DownloadLocationUrl   string                 `protobuf:"bytes,2,opt,name=download_location_url,json=downloadLocationUrl,proto3" json:"download_location_url,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *Build) Reset()         { *m = Build{} }
func (m *Build) String() string { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()    {}
func (*Build) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{3}
}

func (m *Build) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Build.Unmarshal(m, b)
}
func (m *Build) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Build.Marshal(b, m, deterministic)
}
func (m *Build) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Build.Merge(m, src)
}
func (m *Build) XXX_Size() int {
	return xxx_messageInfo_Build.Size(m)
}
func (m *Build) XXX_DiscardUnknown() {
	xxx_messageInfo_Build.DiscardUnknown(m)
}

var xxx_messageInfo_Build proto.InternalMessageInfo

func (m *Build) GetOperatingSystemFamily() *OperatingSystemFamily {
	if m != nil {
		return m.OperatingSystemFamily
	}
	return nil
}

func (m *Build) GetDownloadLocationUrl() string {
	if m != nil {
		return m.DownloadLocationUrl
	}
	return ""
}

// Build maps 1:1 with Family
// Family maps 1:m with Distribution
// Distribution maps 1:m with Versions
//
//                     +-> xenial
//         +-> UBUNTU -|
//         |           +-> bionic
// DEBIAN -|
//         |           +-> 7
//         +-> DEBIAN -|
//                     +-> 8
//
// Note: Distribution and version are considered metadata and should not be
// used as an exhaustive list or searched for via the CLI.
type OperatingSystemFamily struct {
	Name                 OperatingSystemFamily_Name            `protobuf:"varint,1,opt,name=name,proto3,enum=api.OperatingSystemFamily_Name" json:"name,omitempty"`
	Children             []*OperatingSystemFamily_Distribution `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *OperatingSystemFamily) Reset()         { *m = OperatingSystemFamily{} }
func (m *OperatingSystemFamily) String() string { return proto.CompactTextString(m) }
func (*OperatingSystemFamily) ProtoMessage()    {}
func (*OperatingSystemFamily) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{4}
}

func (m *OperatingSystemFamily) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperatingSystemFamily.Unmarshal(m, b)
}
func (m *OperatingSystemFamily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperatingSystemFamily.Marshal(b, m, deterministic)
}
func (m *OperatingSystemFamily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatingSystemFamily.Merge(m, src)
}
func (m *OperatingSystemFamily) XXX_Size() int {
	return xxx_messageInfo_OperatingSystemFamily.Size(m)
}
func (m *OperatingSystemFamily) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatingSystemFamily.DiscardUnknown(m)
}

var xxx_messageInfo_OperatingSystemFamily proto.InternalMessageInfo

func (m *OperatingSystemFamily) GetName() OperatingSystemFamily_Name {
	if m != nil {
		return m.Name
	}
	return OperatingSystemFamily_DEBIAN
}

func (m *OperatingSystemFamily) GetChildren() []*OperatingSystemFamily_Distribution {
	if m != nil {
		return m.Children
	}
	return nil
}

type OperatingSystemFamily_Distribution struct {
	Name                 OperatingSystemFamily_Distribution_Name `protobuf:"varint,1,opt,name=name,proto3,enum=api.OperatingSystemFamily_Distribution_Name" json:"name,omitempty"`
	Versions             []string                                `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *OperatingSystemFamily_Distribution) Reset()         { *m = OperatingSystemFamily_Distribution{} }
func (m *OperatingSystemFamily_Distribution) String() string { return proto.CompactTextString(m) }
func (*OperatingSystemFamily_Distribution) ProtoMessage()    {}
func (*OperatingSystemFamily_Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{4, 0}
}

func (m *OperatingSystemFamily_Distribution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperatingSystemFamily_Distribution.Unmarshal(m, b)
}
func (m *OperatingSystemFamily_Distribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperatingSystemFamily_Distribution.Marshal(b, m, deterministic)
}
func (m *OperatingSystemFamily_Distribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatingSystemFamily_Distribution.Merge(m, src)
}
func (m *OperatingSystemFamily_Distribution) XXX_Size() int {
	return xxx_messageInfo_OperatingSystemFamily_Distribution.Size(m)
}
func (m *OperatingSystemFamily_Distribution) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatingSystemFamily_Distribution.DiscardUnknown(m)
}

var xxx_messageInfo_OperatingSystemFamily_Distribution proto.InternalMessageInfo

func (m *OperatingSystemFamily_Distribution) GetName() OperatingSystemFamily_Distribution_Name {
	if m != nil {
		return m.Name
	}
	return OperatingSystemFamily_Distribution_UBUNTU
}

func (m *OperatingSystemFamily_Distribution) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.Compliance", Compliance_name, Compliance_value)
	proto.RegisterEnum("api.OperatingSystemFamily_Name", OperatingSystemFamily_Name_name, OperatingSystemFamily_Name_value)
	proto.RegisterEnum("api.OperatingSystemFamily_Distribution_Name", OperatingSystemFamily_Distribution_Name_name, OperatingSystemFamily_Distribution_Name_value)
	proto.RegisterType((*Manifest)(nil), "api.Manifest")
	proto.RegisterMapType((map[string]*Flavor)(nil), "api.Manifest.FlavorsEntry")
	proto.RegisterType((*Flavor)(nil), "api.Flavor")
	proto.RegisterMapType((map[string]*Version)(nil), "api.Flavor.VersionsEntry")
	proto.RegisterType((*Version)(nil), "api.Version")
	proto.RegisterType((*Build)(nil), "api.Build")
	proto.RegisterType((*OperatingSystemFamily)(nil), "api.OperatingSystemFamily")
	proto.RegisterType((*OperatingSystemFamily_Distribution)(nil), "api.OperatingSystemFamily.Distribution")
}

func init() { proto.RegisterFile("api/manifest.proto", fileDescriptor_346685e380de5b1f) }

var fileDescriptor_346685e380de5b1f = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xed, 0xfc, 0xde, 0xf4, 0xc7, 0x9a, 0x4f, 0xd5, 0x67, 0xc2, 0x82, 0x60, 0x09, 0x11,
	0x10, 0x32, 0xd4, 0x6d, 0x25, 0xc4, 0x06, 0xd2, 0xfc, 0x40, 0xa4, 0xd6, 0xa9, 0x26, 0x0d, 0x59,
	0x5a, 0x93, 0xc4, 0x81, 0x11, 0x63, 0x8f, 0x65, 0x3b, 0x41, 0x79, 0x0a, 0x24, 0xde, 0x83, 0x1d,
	0x0f, 0xc7, 0x12, 0x79, 0x3c, 0x4e, 0x1d, 0x29, 0x20, 0x76, 0x77, 0xce, 0x39, 0xf7, 0xcc, 0xf5,
	0xb9, 0x23, 0x03, 0x22, 0x21, 0x7d, 0xe9, 0x93, 0x80, 0x2e, 0xbd, 0x38, 0xb1, 0xc2, 0x88, 0x27,
	0x1c, 0x69, 0x24, 0xa4, 0xe6, 0x4f, 0x05, 0x6a, 0x37, 0x12, 0x47, 0xcf, 0x40, 0xcf, 0x35, 0xee,
	0xda, 0x8b, 0x62, 0xca, 0x03, 0x43, 0x69, 0x29, 0xed, 0x3a, 0x3e, 0xc9, 0xf1, 0x8f, 0x19, 0x8c,
	0x2e, 0xa0, 0xba, 0x64, 0x64, 0xcd, 0xa3, 0xd8, 0x50, 0x5b, 0x5a, 0xbb, 0x61, 0x37, 0x2d, 0x12,
	0x52, 0x2b, 0xb7, 0xb2, 0x06, 0x19, 0xd9, 0x0f, 0x92, 0x68, 0x83, 0x73, 0x69, 0xf3, 0x3d, 0x1c,
	0x16, 0x09, 0xa4, 0x83, 0xf6, 0xc5, 0xdb, 0xc8, 0x3b, 0xd2, 0x12, 0x3d, 0x86, 0xf2, 0x9a, 0xb0,
	0x95, 0x67, 0xa8, 0x2d, 0xa5, 0xdd, 0xb0, 0x1b, 0xc2, 0x35, 0xeb, 0xc1, 0x19, 0xf3, 0x46, 0x7d,
	0xad, 0x98, 0xdf, 0x55, 0xa8, 0x64, 0x28, 0x42, 0x50, 0x0a, 0x88, 0xef, 0x49, 0x13, 0x51, 0xa3,
	0x27, 0x70, 0xbc, 0xa4, 0x2c, 0xf1, 0x22, 0x37, 0x8c, 0xf8, 0x92, 0xb2, 0xcc, 0xae, 0x8e, 0x8f,
	0x32, 0xf4, 0x36, 0x03, 0x91, 0x01, 0xd5, 0x0c, 0x88, 0x0d, 0xad, 0xa5, 0xb5, 0xeb, 0x38, 0x3f,
	0xa2, 0x33, 0x68, 0xcc, 0xb9, 0x1f, 0x32, 0x4a, 0x82, 0xb9, 0x17, 0x1b, 0xa5, 0x96, 0xd6, 0x3e,
	0xb6, 0x4f, 0xc4, 0x30, 0xdd, 0x2d, 0x8e, 0x8b, 0x1a, 0x74, 0x09, 0x35, 0x99, 0x59, 0x6c, 0x94,
	0x45, 0x24, 0x0f, 0x0a, 0xc3, 0x5b, 0x32, 0x38, 0x99, 0xc8, 0x56, 0xda, 0x1c, 0xc2, 0xd1, 0x0e,
	0xb5, 0x27, 0x13, 0x73, 0x37, 0x93, 0x43, 0x61, 0x2b, 0x9b, 0x8a, 0xa1, 0x74, 0xa0, 0x9a, 0xaf,
	0x67, 0x5f, 0x28, 0x26, 0x54, 0x66, 0x2b, 0xca, 0x16, 0xf9, 0xc6, 0x40, 0xf8, 0x5c, 0xa5, 0x10,
	0x96, 0x8c, 0xf9, 0x4d, 0x81, 0xb2, 0x40, 0x10, 0x86, 0xff, 0x79, 0xe8, 0x45, 0x24, 0xa1, 0xc1,
	0x27, 0x37, 0xde, 0xc4, 0x89, 0xe7, 0xbb, 0x4b, 0xe2, 0x53, 0x96, 0x8d, 0x96, 0x2f, 0x7c, 0x94,
	0x6b, 0xc6, 0x42, 0x32, 0x10, 0x0a, 0x7c, 0xca, 0xf7, 0xc1, 0xc8, 0x86, 0xd3, 0x05, 0xff, 0x1a,
	0x30, 0x4e, 0x16, 0x2e, 0xe3, 0x73, 0x92, 0x50, 0x1e, 0xb8, 0xab, 0x88, 0xc9, 0xed, 0xfc, 0x97,
	0x93, 0xd7, 0x92, 0x9b, 0x44, 0xcc, 0xfc, 0xa5, 0xc2, 0xe9, 0xde, 0x4b, 0xd0, 0x79, 0xe1, 0x1b,
	0x8f, 0xed, 0x47, 0x7f, 0x1e, 0xc7, 0x72, 0x88, 0xef, 0xc9, 0x10, 0xba, 0x50, 0x9b, 0x7f, 0xa6,
	0x6c, 0x11, 0x79, 0x81, 0x8c, 0xe1, 0xe9, 0x5f, 0x1a, 0x7b, 0x34, 0x4e, 0x22, 0x3a, 0x5b, 0xa5,
	0xc3, 0xe0, 0x6d, 0x63, 0xf3, 0x87, 0x02, 0x87, 0x45, 0x0a, 0xbd, 0xdb, 0x19, 0xe5, 0xc5, 0x3f,
	0x3a, 0x16, 0xe7, 0x6a, 0x16, 0x5e, 0x8f, 0x2a, 0xde, 0xe2, 0xf6, 0x6c, 0xbe, 0x85, 0x52, 0xaa,
	0x44, 0x00, 0x95, 0xc9, 0xd5, 0xc4, 0xb9, 0x9b, 0xe8, 0x07, 0x69, 0xdd, 0xeb, 0x5f, 0x0d, 0x3b,
	0x8e, 0xae, 0xa4, 0x75, 0xb7, 0xef, 0xdc, 0x8d, 0xc6, 0xba, 0x8a, 0x6a, 0x50, 0xc2, 0x1f, 0xfa,
	0xd7, 0xba, 0x86, 0xea, 0x50, 0xbe, 0xe9, 0x74, 0x47, 0x63, 0xbd, 0x64, 0x5e, 0xde, 0x1b, 0xc8,
	0xa6, 0x83, 0xad, 0x50, 0xb4, 0xf7, 0x3a, 0x78, 0x3a, 0x74, 0x74, 0x15, 0x35, 0xa0, 0x3a, 0x1d,
	0x3a, 0xbd, 0xd1, 0x74, 0xac, 0x6b, 0xcf, 0x1f, 0x02, 0xdc, 0x3f, 0x76, 0x74, 0x04, 0xf5, 0xc1,
	0xf0, 0x76, 0xec, 0x9e, 0x5d, 0xbc, 0xb2, 0xf5, 0x83, 0x59, 0x45, 0xfc, 0x44, 0xce, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x6e, 0x51, 0x22, 0xbe, 0x5a, 0x04, 0x00, 0x00,
}
